{"version":3,"sources":["components/trackList/trackItem/trackItem.module.css","components/trackSkeleton/trackSkeleton.module.css","components/searchBar/index.tsx","services/convertMusicDuration.ts","services/convertTrackTitle.ts","assets/images/not-found.jpg","components/trackList/trackItem/index.tsx","components/trackList/index.jsx","components/trackSkeleton/index.jsx","components/modal/index.tsx","components/layouts/navbar/index.jsx","pages/CreatePlaylist/index.tsx"],"names":["module","exports","SearchBar","search","setSearch","buttonHandleSearch","flexDir","mt","mb","id","placeholder","size","variant","onChange","e","target","value","type","mr","onClick","width","convertMusicDuration","duration","minutes","Math","floor","seconds","toFixed","convertTrackTitle","title","length","substring","Track","track","selectedTracks","setSelectedTracks","className","style","src","album","images","url","Image","alt","name","height","artists","release_date","duration_ms","uri","includes","newPlaylist","filter","handleButtonSelect","TrackList","tracks","map","TrackSkeleton","ModalFormPlaylist","handleFormSubmit","postPlaylist","setPostPlaylist","isOpen","onClose","handleChange","onSubmit","pb","minLength","description","colorScheme","Navbar","history","useHistory","dispatch","useDispatch","alignItems","p","as","color","logout","push","CreatePlaylist","useAppDispatch","useDisclosure","onOpen","token","useAppSelector","state","auth","accessToken","userID","user","playlist","console","log","useState","isLoading","setIsLoading","w","h","minH","justifyContent","toast","error","getSearchTracks","then","data","setTracks","items","alignSelf","isDisabled","pl","pr","position","preventDefault","createNewPlaylist","storeTracksToNewPlaylist","success"],"mappings":"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","file":"static/js/4.d400fb80.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper-track-list\":\"trackItem_wrapper-track-list__G0R9T\",\"track-number\":\"trackItem_track-number__Y8JHv\",\"track-image\":\"trackItem_track-image__2dPVe\",\"track-title\":\"trackItem_track-title__3ZWve\",\"track-artist\":\"trackItem_track-artist__3h9fj\",\"track-date\":\"trackItem_track-date__1O0iy\",\"track-duration\":\"trackItem_track-duration__2-NuJ\",\"track-action\":\"trackItem_track-action__1juc8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper-track-list\":\"trackSkeleton_wrapper-track-list__3N5AS\",\"skeleton\":\"trackSkeleton_skeleton__Wrf3x\",\"track-number\":\"trackSkeleton_track-number__3Vmhi\",\"track-image\":\"trackSkeleton_track-image__1fE6h\",\"track-title\":\"trackSkeleton_track-title__1jxfF\",\"track-artist\":\"trackSkeleton_track-artist__1Oxe4\",\"track-duration\":\"trackSkeleton_track-duration__ifk40\",\"track-action\":\"trackSkeleton_track-action__ncHqH\"};","import React from 'react';\nimport { Flex, Button, Input, InputGroup, Text } from '@chakra-ui/react';\n\ntype SearchTrack = {\n  search: string;\n  setSearch: (query: string) => void;\n  buttonHandleSearch: React.MouseEventHandler<HTMLButtonElement>;\n};\n\nconst SearchBar = ({ search, setSearch, buttonHandleSearch }: SearchTrack) => {\n  return (\n    <Flex flexDir=\"column\">\n      <Text mt={3} mb={2}>\n        Lets find something for your new playlist\n      </Text>\n      <InputGroup>\n        <Input\n          id=\"input-search\"\n          placeholder=\"Search..\"\n          size=\"md\"\n          variant=\"filled\"\n          onChange={(e) => setSearch(e.target.value)}\n          value={search}\n          type=\"text\"\n          mr=\"5\"\n        />\n        <Button\n          id=\"btn-search\"\n          onClick={buttonHandleSearch}\n          size=\"md\"\n          width=\"150px\"\n        >\n          Search\n        </Button>\n      </InputGroup>\n    </Flex>\n  );\n};\n\nexport default SearchBar;\n","const convertMusicDuration = (duration: number): string | number => {\n  const minutes = Math.floor(duration / 60000);\n  const seconds = ((duration % 60000) / 1000).toFixed(0);\n\n  return `${minutes}:${seconds}`;\n};\n\nexport default convertMusicDuration;\n","const convertTrackTitle = (title: string): string => {\n  if (title.length > 25) {\n    return title.substring(0, 25) + '...';\n  }\n  return title;\n};\n\nexport default convertTrackTitle;\n","export default __webpack_public_path__ + \"static/media/not-found.e31c2402.jpg\";","import React from 'react';\n\nimport convertMusicDuration from 'services/convertMusicDuration';\nimport convertTrackTitle from 'services/convertTrackTitle';\n\nimport Image from 'assets/images/not-found.jpg';\n\nimport style from './trackItem.module.css';\n\ntype TrackItem = {\n  track: {\n    album: {\n      images: {\n        [index: number]: {\n          url: string;\n        };\n      };\n      release_date: string;\n    };\n    name: string;\n    artists: {\n      [index: number]: {\n        name: string;\n      };\n    };\n    duration_ms: number;\n    uri: string;\n  };\n  id: string;\n  selectedTracks: Array<string>;\n  setSelectedTracks: (query: string[]) => void;\n};\n\nconst Track = ({ track, id, selectedTracks, setSelectedTracks }: TrackItem) => {\n  const handleButtonSelect = (id: string): void => {\n    let uri: string = id;\n    if (selectedTracks.includes(uri)) {\n      let newPlaylist: string[] = selectedTracks.filter(\n        (track) => track !== uri\n      );\n      setSelectedTracks(newPlaylist);\n    } else {\n      setSelectedTracks([...selectedTracks, uri]);\n    }\n  };\n\n  return (\n    <div className={style['wrapper-track-list']}>\n      <div className={style['track-number']}>\n        <p>{id + 1}</p>\n      </div>\n      <div className={style['track-image']}>\n        <img\n          src={track.album.images[2]?.url ?? Image}\n          alt={track?.name}\n          style={{ width: '64px', height: '64px' }}\n        />\n      </div>\n      <div className={style['track-title']}>\n        <p data-testid=\"track-name\">{convertTrackTitle(track.name)}</p>\n      </div>\n      <div className={style['track-artist']}>\n        <p data-testid=\"track-artist\">{track.artists[0]?.name}</p>\n      </div>\n\n      <div className={style['track-date']}>\n        <p data-testid=\"track-date\">{track.album.release_date}</p>\n      </div>\n      <div className={style['track-duration']}>\n        <p data-testid=\"track-duration\">\n          {convertMusicDuration(track.duration_ms)}\n        </p>\n      </div>\n      <div className={style['track-action']}>\n        <button\n          onClick={() => handleButtonSelect(track?.uri)}\n          className={style['btn-select']}\n        >\n          {selectedTracks.includes(track.uri) ? 'Deselect' : 'Select'}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Track;\n","import React from 'react';\n\nimport Track from './trackItem';\n\nconst TrackList = ({ tracks, selectedTracks, setSelectedTracks }) => {\n  return tracks.map((track, id) => {\n    return (\n      <Track\n        key={track.id}\n        track={track}\n        id={id}\n        selectedTracks={selectedTracks}\n        setSelectedTracks={setSelectedTracks}\n      />\n    );\n  });\n};\n\nexport default TrackList;\n","import React from 'react';\n\nimport style from './trackSkeleton.module.css';\n\nconst TrackSkeleton = () => {\n  return (\n    <div className={style['wrapper-track-list']}>\n      <div className={style['track-number']}></div>\n      <div className={style['track-image']}></div>\n      <div className={style['track-title']}></div>\n      <div className={style['track-artist']}></div>\n\n      <div className={style['track-duration']}></div>\n      <div className={style['track-action']}></div>\n    </div>\n  );\n};\n\nexport default TrackSkeleton;\n","import React from 'react';\n\nimport {\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Textarea,\n  Modal,\n  ModalBody,\n  ModalHeader,\n  ModalContent,\n  ModalOverlay,\n  ModalCloseButton,\n  ModalFooter,\n} from '@chakra-ui/react';\n\ntype TypeModal = {\n  handleFormSubmit: any;\n  postPlaylist: any;\n  setPostPlaylist: any;\n  isOpen: any;\n  onClose: any;\n};\n\nconst ModalFormPlaylist = ({\n  handleFormSubmit,\n  postPlaylist,\n  setPostPlaylist,\n  isOpen,\n  onClose,\n}: TypeModal) => {\n  const handleChange = (e: any) => {\n    const { name, value } = e.target;\n    setPostPlaylist({ ...postPlaylist, [name]: value });\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <form onSubmit={handleFormSubmit}>\n        <ModalContent>\n          <ModalHeader>Create Playlist</ModalHeader>\n          <ModalCloseButton />\n\n          <ModalBody pb={6}>\n            <FormControl>\n              <FormLabel>Playlist Name</FormLabel>\n              <Input\n                id=\"name\"\n                name=\"name\"\n                type=\"text\"\n                minLength={10}\n                value={postPlaylist.name}\n                onChange={handleChange}\n              />\n            </FormControl>\n            <FormControl mt={4}>\n              <FormLabel>Description</FormLabel>\n              <Textarea\n                id=\"description\"\n                name=\"description\"\n                minLength={20}\n                value={postPlaylist.description}\n                onChange={handleChange}\n              />\n            </FormControl>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button type=\"submit\" colorScheme=\"green\" mr={3} onClick={onClose}>\n              Create New Playlist\n            </Button>\n            <Button onClick={onClose}>Cancel</Button>\n          </ModalFooter>\n        </ModalContent>\n      </form>\n    </Modal>\n  );\n};\n\nexport default ModalFormPlaylist;\n","import React from 'react';\n\n// ? lib third party\nimport { Flex, Box, Spacer, Button, Heading } from '@chakra-ui/react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\n// ? reducer\nimport { logout } from '../../../redux/authSlice';\nconst Navbar = () => {\n  let history = useHistory();\n  const dispatch = useDispatch();\n\n  const handleLogoutClick = () => {\n    dispatch(logout());\n    history.push('/');\n  };\n\n  return (\n    <Flex alignItems=\"center\" width=\"100vw\">\n      <Box p=\"4\">\n        <Heading as=\"h3\" size=\"lg\" color=\"#fff\">\n          Spotify\n        </Heading>\n      </Box>\n      <Spacer />\n      <Box p=\"4\">\n        <Button size=\"sm\">Profile</Button>\n      </Box>\n      <Box p=\"4\">\n        <Button onClick={handleLogoutClick} size=\"sm\">\n          Logout\n        </Button>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default Navbar;\n//\n","import React, { useState } from 'react';\n\n//  ? components\n// import Navbar from \"components/layouts/navbar\";\nimport SearchBar from 'components/searchBar';\nimport TrackList from 'components/trackList';\nimport TrackSkeleton from 'components/trackSkeleton';\nimport Modal from 'components/modal';\nimport Navbar from 'components/layouts/navbar';\n\n// ? lib third party\nimport { useAppSelector } from '../../redux/store';\nimport { useAppDispatch } from '../../redux/store';\nimport { Flex, Heading, Button } from '@chakra-ui/react';\nimport { useDisclosure } from '@chakra-ui/hooks';\n\nimport toast, { Toaster } from 'react-hot-toast';\n\n// ? api\nimport {\n  getSearchTracks,\n  createNewPlaylist,\n  storeTracksToNewPlaylist,\n} from 'api/apiSpotify';\n\n// ! reducer area\n\nimport { setTracks } from 'redux/playlistSlice';\n\nexport default function CreatePlaylist() {\n  const dispatch = useAppDispatch();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const token = useAppSelector((state) => state.auth.accessToken);\n  const userID = useAppSelector((state) => state.auth.user?.id);\n  const tracks = useAppSelector((state) => state.playlist.tracks);\n\n  console.log(userID);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [search, setSearch] = useState('');\n  const [selectedTracks, setSelectedTracks] = useState([]);\n\n  const [postPlaylist, setPostPlaylist] = useState({\n    name: '',\n    description: '',\n  });\n\n  // const handleChange = (e) => {\n  //   const { name, value } = e.target;\n  //   setPostPlaylist({ ...postPlaylist, [name]: value });\n  // };\n\n  const buttonHandleSearch = () => {\n    setIsLoading(true);\n    if (search === '') {\n      toast.error(\"Search can't be empty\");\n    } else {\n      getSearchTracks(search, token).then((data) => {\n        dispatch(setTracks(data.tracks.items));\n        setIsLoading(false);\n      });\n      setSearch('');\n    }\n  };\n\n  const handleFormSubmit = (e: any) => {\n    e.preventDefault();\n    if (selectedTracks.length <= 0) {\n      toast.error('You have to selected song first');\n    } else {\n      createNewPlaylist(userID, token, postPlaylist).then((newPlaylist) =>\n        storeTracksToNewPlaylist(newPlaylist.id, token, selectedTracks).then(\n          (data) => console.log(data)\n        )\n      );\n\n      toast.success('Create New Playlist Has Been Successfully.');\n\n      setPostPlaylist({\n        name: '',\n        description: '',\n      });\n      setSelectedTracks([]);\n    }\n  };\n\n  return (\n    <>\n      <Flex w=\"100%\" h=\"100%\" minH=\"100vh\" flexDir=\"column\">\n        <Navbar />\n        <Flex p=\"10\" flexDir=\"column\">\n          <Heading as=\"h4\" size=\"md\">\n            Search\n          </Heading>\n          <Flex\n            flexDir=\"row\"\n            alignItems=\"flex-start\"\n            justifyContent=\"space-between\"\n          >\n            <SearchBar\n              search={search}\n              setSearch={setSearch}\n              buttonHandleSearch={buttonHandleSearch}\n            />\n            <Button\n              width={200}\n              alignSelf=\"flex-end\"\n              onClick={onOpen}\n              colorScheme=\"green\"\n              isDisabled={selectedTracks.length > 0 ? false : true}\n            >\n              Create Playlist\n            </Button>\n          </Flex>\n        </Flex>\n        <Flex flexDir=\"column\" pl=\"20\" pr=\"20\">\n          {isLoading ? (\n            <div>\n              <TrackSkeleton />\n              <TrackSkeleton />\n              <TrackSkeleton />\n              <TrackSkeleton />\n              <TrackSkeleton />\n            </div>\n          ) : (\n            <TrackList\n              tracks={tracks}\n              selectedTracks={selectedTracks}\n              setSelectedTracks={setSelectedTracks}\n            />\n          )}\n        </Flex>\n        <Toaster position=\"top-right\" />\n        <Modal\n          handleFormSubmit={handleFormSubmit}\n          postPlaylist={postPlaylist}\n          setPostPlaylist={setPostPlaylist}\n          isOpen={isOpen}\n          onClose={onClose}\n        />\n      </Flex>\n      {/* <Flex\n        w=\"90%\"\n        h=\"100%\"\n        minH=\"100vh\"\n        flexDir=\"column\"\n        bgColor=\"#212121\"\n        color=\"#b3b3b3\"\n      >\n        <Flex p=\"10\" flexDir=\"column\">\n          <Heading as=\"h4\" size=\"md\">\n            Search\n          </Heading>\n          <Flex\n            flexDir=\"row\"\n            alignItems=\"flex-start\"\n            justifyContent=\"space-between\"\n          >\n            <SearchBar\n              search={search}\n              setSearch={setSearch}\n              buttonHandleSearch={buttonHandleSearch}\n            />\n            <Button\n              width={200}\n              alignSelf=\"flex-end\"\n              onClick={onOpen}\n              colorScheme=\"green\"\n              isDisabled={selectedTracks.length > 0 ? false : true}\n            >\n              Create Playlist\n            </Button>\n          </Flex>\n        </Flex>\n        <Box pl=\"10\" pr=\"10\">\n          {isLoading ? (\n            <div>\n              <TrackSkeleton />\n              <TrackSkeleton />\n              <TrackSkeleton />\n              <TrackSkeleton />\n              <TrackSkeleton />\n            </div>\n          ) : (\n            <TrackList\n              tracks={tracks}\n              selectedTracks={selectedTracks}\n              setSelectedTracks={setSelectedTracks}\n            />\n          )}\n        </Box>\n        <Toaster position=\"top-right\" />\n      </Flex> */}\n\n      {/* <Modal\n        initialFocusRef={initialRef}\n        finalFocusRef={finalRef}\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <ModalOverlay />\n        <form onSubmit={handleFormSubmit}>\n          <ModalContent>\n            <ModalHeader>Create Playlist</ModalHeader>\n            <ModalCloseButton />\n\n            <ModalBody pb={6}>\n              <FormControl>\n                <FormLabel>Playlist Name</FormLabel>\n                <Input\n                  ref={initialRef}\n                  id=\"name\"\n                  name=\"name\"\n                  type=\"text\"\n                  minLength=\"10\"\n                  value={postPlaylist.name}\n                  onChange={handleChange}\n                />\n              </FormControl>\n              <FormControl mt={4}>\n                <FormLabel>Description</FormLabel>\n                <Textarea\n                  id=\"description\"\n                  name=\"description\"\n                  minLength=\"20\"\n                  value={postPlaylist.description}\n                  onChange={handleChange}\n                />\n              </FormControl>\n            </ModalBody>\n\n            <ModalFooter>\n              <Button\n                type=\"submit\"\n                colorScheme=\"green\"\n                mr={3}\n                onClick={onClose}\n              >\n                Create New Playlist\n              </Button>\n              <Button onClick={onClose}>Cancel</Button>\n            </ModalFooter>\n          </ModalContent>\n        </form>\n      </Modal> */}\n    </>\n  );\n}\n"],"sourceRoot":""}